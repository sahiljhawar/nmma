name: Unit Test nmma
on:
  push:
    branches: [main, macOS-ci]
    paths-ignore:
      - 'doc/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'doc/**'
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - name: Checkout branch being tested
      uses: actions/checkout@v3
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        detached: true
    - name: Set up Python with Conda ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        miniforge-version: latest
        use-mamba: true
        mamba-version: "*"
        activate-environment: nmma_env
        
    - name: Restore SVD models from cache
      uses: actions/cache@v3
      with:
        path: svdmodels
        key: svdmodels-${{ runner.os }}-${{ hashFiles('**/LICENSE') }}
        restore-keys: svdmodels-${{ runner.os }}-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-2-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-2-
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y openmpi-bin libopenmpi-dev gfortran build-essential libblas3 libblas-dev liblapack3 liblapack-dev libatlas-base-dev texlive texlive-latex-extra texlive-fonts-recommended dvipng cm-super
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        conda install -c conda-forge pyfftw c-compiler
        brew install openmpi hdf5 gcc openblas lapack texlive cmake
        echo "FC=$(which gfortran-11)" >> $GITHUB_ENV
        echo "CC=$(which gcc)" >> $GITHUB_ENV
        echo "CXX=$(which g++)" >> $GITHUB_ENV
  

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade git+https://github.com/bitranox/wrapt_timeout_decorator.git
        python -m pip install pytest pytest-cov flake8 pytest-aiohttp sqlparse freezegun PyJWT joblib tensorflow afterglowpy coveralls
        python -m pip install .

    - name: Install Tensorflow (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip uninstall -y tensorflow-macos
        python -m pip uninstall -y tensorflow-metal
        python -m pip install --no-cache-dir tensorflow-macos
        python -m pip install --no-cache-dir tensorflow-metal

    - name: Set up Homebrew
      if: matrix.os == 'macos-latest'
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@master
      
    - name: Install MultiNest
      run: |
        git clone https://github.com/JohannesBuchner/MultiNest
        cd MultiNest/build
        rm -rf *
        cmake ..
        make
        cd ../..

    - name: Export Libraries (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        export LD_LIBRARY_PATH=/home/runner/work/nmma/nmma/MultiNest/lib:$LD_LIBRARY_PATH
        export DYLD_LIBRARY_PATH=/home/runner/work/nmma/nmma/MultiNest/lib:$DYLD_LIBRARY_PATH
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude docs
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude docs,versioneer.py,nmma/_version.py,nmma/tests,nmma/*/__init__.py
    - name: Test with pytest
      run: |
        python -m coverage run --source nmma -m pytest nmma/tests/*.py
      env:
        LD_LIBRARY_PATH: .:/home/runner/work/nmma/nmma/MultiNest/lib
    - name: Run Coveralls
      if: ${{ success() }}
      run: |
        coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
